App.backend.waitEvents = (function create_backend_wait_events(conn){
    /* channel#2: receive events from backend */
    var defaults
    conn.suspendEvents(false)// `this` fires own signal in callback()
    conn.url = (App.cfg.backend.url || '') + '/um/lib/wait_events'
    conn.timeout = App.cfg.extjs.wait_events.timeout || (1 << 22)// ~ hour
    conn.defer = null
    defaults = {
        autoAbort: true,// backend has only one `res` per `req.session`
        callback:
        function backend_events(options, success, res){
        var data
            try {
                data = JSON.parse(res.responseText)
            } catch(ex){
                success = false
                console.error('App.backend.waitEvents:')
                console.error(res)
                data = ex.stack
                Ext.Msg.show({
                   title: l10n.errun_title + ' App.backend.waitEvents',
                   buttons: Ext.Msg.OK,
                   icon: Ext.Msg.ERROR,
                   msg:
('data: ' + (res.responseText || 'empty')).slice(0, 16).replace(/</g, '&lt;')
+'<br><b>'+ l10n.errun_stack + '</b>' + data.replace(/</g, '&lt;')
                })
            }
            Ext.globalEvents.fireEventArgs(
                'wes4UI',
                [ success, data ],
                res.statusText
            )
            if(conn.defer) clearTimeout(conn.defer)
            if(success){
                conn.defer = 0
                req()
                return
            }
            if(-1 != res.status){// if not autoAbort (e.g. manual request)
                conn.defer = Ext.defer(// retry a bit later
                    req,
                    App.cfg.extjs.wait_events.defer || (1 << 17)// ~ two minutes
                )
            }
            return
        }
    }
    req({
        params: 'onli',
        callback:
        function get_init_user_id(o, success, res){
        var data, i
            if(success && res.responseText){
                data = JSON.parse(res.responseText)
                i = data.length - 1
                do {
                    if('usts@um' == data[i].ev){
                    // assign backend's ID instead of autogenerated User Model's ID
                    // used in e.g. Chat to make this user bold
                        App.User.id = data[i].json
                        data = null
                        break
                    }
                } while(i--)
            }
            data && success && (success = false)

            defaults.callback(o, success, res)
        }
    })// setup waiting cycle, send initial user status

    return req// return function to act manually

    function req(opts){
    var ev = 'initwes@UI'
        Ext.globalEvents.fireEventArgs(ev, [ ev ])
        return conn.request(Ext.applyIf(opts || { }, defaults))
    }

})(Ext.create('App.backend.Connection'))
