<html>
<head>
    <meta charset="utf-8">
    <title>SMS Partner v022.04.02.2013 &copy; 2012-2013</title>
    <link rel="shortcut icon" type="image/ico" href="/favicon.ico" />
    <link rel="stylesheet" href="extjs/resources/css/ext-all.css">
    <style>body{background-color:white}
    .r{color:red}.g{color:green}.wg{color:#34C421}.b{color:blue}
     .icon-grid { background-image:url(images/grid.png) !important; }
     .icon-tabs { background-image:url(images/tabs.gif) !important; }
     .add { background-image:url(images/add.gif) !important; }
     .option { background-image:url(images/plugin.gif) !important; }
     .remove { background-image:url(images/delete.gif) !important; }
     .addrow { background-image:url(images/add_row.png) !important; }
     .x-grid-row-over .x-grid-cell-inner { font-weight: bold; }
     /*.cpta { background-color:#CBE5CF;border:1px dashed;margin:0 11px 0 0;padding:0;height:30px;width:111px;float:left;overflow:hidden;resize:none}
     .cpta:hover { background-color:#FFFFFF;}*/
 	 .cpta2 { background-color:transparent;border:0;margin:0;padding:0;
        height:1px;width:1px;overflow:hidden;resize:none;z-index:-1
     }
     .cpta2:hover { background-color:#FFFFFF;}

     .row-new { background-color: #CBE5CF!important; }
 	 .row-err { background-color: #FF9787!important; }
     .wrap .x-grid-cell-inner { white-space: normal; }
     .x-grid-rowwrap-div .x-grid-cell, .x-grid-rowwrap-div .x-grid-cell-inner {
        border-width: 0;
     }
     //.x-grid-cell-inner { white-space: pre-wrap !important; word-wrap: break-word !important;}
     .wwrap { white-space: pre-wrap !important; word-wrap: break-word !important;}
     /*selectable body of row expader
depends on: extjs-4.1\examples\ux\RowExpander.js
     */
     .x-grid-rowbody-tr {
        cursor: text;
        user-select: text;
        -webkit-user-select: text;
        -o-user-select: text;
        -ie-user-select: text;
        -moz-user-select: text;
    }
    /*or hundare@http://www.sencha.com/forum/showthread.php?242091
    columns:[
        {header:'Name',  dataIndex:'name', field:'textfield'},
        {header:'Email', dataIndex:'email', flex:1,
            editor:{
                xtype:'textfield',                readOnly:true,
                allowBlank:false
            }
        },
        {header:'Phone', dataIndex:'phone'}
    ],
    selType:'rowmodel',
    plugins:[
        Ext.create('Ext.grid.plugin.RowEditing',{
            clicksToEdit:1
        })
    ],
    */
    </style>
</head>
<body>
<textarea id="cp" class="cpta2" onfocus="this.select()">copy paste area</textarea>
<center id='startup'><img src='images/loading.gif'><br/>Загрузка...
<img width="1" height="1" src="/extjs/resources/themes/images/default/shared/icon-error.gif"/>
<noscript><br/><h2 style="color:red;background-color:white">Без включенного Java Script ждать нечего!</h2></noscript>
<script type="text/javascript">setTimeout(function(){
if(!window.hasOwnProperty("Ext"))
alert('Долго грузиться или не найден (см. консоль) EXTJS.\n'+'Нужно проверить конфигурацию "enjsms" и наличе директории "ExtJS".') }
,1024<<6)
</script></center></body>
<script src="extjs/ext-all-debug.js"></script>
<script type="text/javascript">(function(Ext){//http://cdn.sencha.com/ext-4.1.1-gpl/release-notes.html
Ext.sheets = {}
Ext.Loader.setConfig({ enabled: true
    ,paths: {
        'Ext.ux': 'extjs/ux'
        ,'Ext.ux.grid': 'grid'
        //'Ext.ux.grid.plugin': '../../ux/grid/plugin'
    }
})
Ext.require([
     'Ext.ux.TabReorderer'
    ,'Ext.ux.TabScrollerMenu'
    ,'Ext.ux.RowExpander'
])
//Ext.require(['*']);
Ext.onReady(function(){
// Excel-like key editing and navigation: http://jsfiddle.net/mohammad_erdin/sDFfY/
/*Ext.override(Ext.grid.plugin.CellEditing,{
    onSpecialKey: function(ed, field, e) {
        if (e.getKey() === e.TAB) {
            e.stopEvent()
            var sm = this.grid.getSelectionModel();
            if (sm.onEditorTab) sm.onEditorTab(this, e)
        }else if(e.getKey() === e.ENTER){
            e.stopEvent();
            var sm = this.grid.getSelectionModel()
            if (sm.onEditorEnter) sm.onEditorEnter(this, e)
        }
    }
})

Ext.override(Ext.selection.CellModel, {
    lastId: null
    ,onEditorTab: function(ep, e) {
        var me = this
            ,view = me.view
            ,header = ep.getActiveColumn()
            ,position = view.getPosition(ep.getActiveRecord(), header)
            ,direction = e.shiftKey ? 'left' : 'right'
            ,newPosition = view.walkCells(position, direction, e, false)
            ,newId = newPosition ? newPosition.row : null
            ,grid = view.up('gridpanel')

        if (me.lastId && newId && me.lastId != newId){
            deltaX = me.lastId < newId ? -Infinity : Infinity
            header = grid.headerCt.getHeaderAtIndex(newPosition.column)
            if(header){
                while(!header.getEditor()){
                    newPosition = view.walkCells(newPosition, direction, e, false)
                    header = grid.headerCt.getHeaderAtIndex(newPosition.column)
                }
            }
        } else deltaX = ep.context.column.width * (e.shiftKey ? -1 : 1)
        grid.scrollByDeltaX(deltaX)
        me.lastId = newPosition.row
        Ext.defer(function(){// queue start edit
            if (newPosition) ep.startEditByPosition(newPosition)
            else ep.completeEdit()
        }, 111)
    }
    ,onEditorEnter:function(ep ,e){
        var me = this
            //,view = me.view
            ,column = ep.getActiveColumn()
            //,grid = view.up('gridpanel')
            ,position = me.view.getPosition(ep.getActiveRecord(), column)
            ,direction = e.shiftKey ? 'up' : 'down'
            ,newPosition
            column = me.view.getEl(column)
        do {
            if(e.shiftKey) {
                if (1 == position.row)
                    break
            } else if (me.view.all.elements.length == (1 + position.row))
                break
            newPosition = me.view.walkCells(position, direction, e, false)
            me.lastId = newPosition.row
            ep.grid.scrollByDeltaY(ep.context.row.clientHeight * (e.shiftKey ? -1 : 1))
        } while(false)
        Ext.defer(function(){// queue start edit
            if (newPosition) return ep.startEditByPosition(newPosition)
            ep.completeEdit()
            me.setCurrentPosition(me.getCurrentPosition())// select by cursor
            column.focus()// activate cell
        }, 111)
    }
})
*/
// данные для sms grid
    function taq_load(){
        taq.load(function(){
            Ext.defer(Ext.sync_extjs_nodejs, 0)
            Ext.getCmp('taq_loadButton').setText("Загрузить max 16 первых. Всего SMS: " +
                        taq.getProxy().getReader().rawData.total_parts)
        })
    }
    Ext.define('taq',{
        extend: 'Ext.data.Model'
        ,idProperty:'_id'
        ,fields: [
            {name: 'dateQ', type: 'date', dateFormat: 'c'}
            ,{name: 'm'}
            ,{name: 'num'}
            ,{name: 'got'}
            ,{name: 'mod'}
            ,{name: 'n'}
            ,{name: 'dateT', type: 'date', dateFormat: 'c'}
            ,{name: 'sid'}
            ,{name: 'udh'}
        ]
    })

    Ext.define('taout',{
        extend: 'Ext.data.Model'
        ,idProperty:'_id'
        ,fields: [
            {name: 'm'}
            ,{name: 'num'}
            ,{name: 'sid'}
            ,{name: 'dateQ', type: 'date', dateFormat: 'c'}
            ,{name: 'dateS', type: 'date', dateFormat: 'c'}
            ,{name: 'dateR', type: 'date', dateFormat: 'c'}
            ,{name: 'module'}
         ]
    })

    Ext.define('tain',{
        extend: 'Ext.data.Model'
        ,idProperty:'_id'
        ,fields: [
            {name: 'b'}
            ,{name: 'num'}
            ,{name: 'sid'}
            ,{name: 'm'}
            ,{name: 'd', type: 'date', dateFormat: 'c'}
            ,{name: 'module'}
         ]
    })
//config
var pageSize = 20 ,north = !false
    ,editt = 'data-qtip="Редактор - 1 клик, выход - CTRL или SHIFT + ENTER"'
    Ext.smsuimsg = !false

var ussdC = Ext.create('Ext.data.Store',{
        fields: ['n', 'd'],
        data : [
         {n: '', d: '*#'}
        ,{n:"*100#", d:'Баланс "*100#"'}
        ,{n:"*147#", d:'Показать номер ("Velcom", "MTS") "*147#"'}
        ,{n:"*111*10#", d:'Показать номер ("MTS") "*111*10#"'}
        ,{n:"*706#", d:'МТС: бонусные баллы'}
        ,{n:"*707*42#", d:'МТС: SMS-пакет 50 на 30 дней'}
        ,{n:"*707*43#", d:'МТС: SMS-пакет 100 на 30 дней'}
        ]
    })
    ,phonesC = Ext.create('Ext.data.Store',{//TODO phone book
        fields: ['n', 'd'],
        data : [
         {n: '', d: '+375...'}
        ,{n:"+375298077782", d:'Master Olecom +375(29)80-777-82'}
        ]
    })
    ,modulesC = Ext.create('Ext.data.Store',{
        storeId: 'modules'
        ,fields: ['ownum' , 'd']
        ,proxy: { type: 'ajax' ,url: 'mods.json' ,reader: { type: 'json' } }
        ,autoLoad: { callback: function (rec, op, success) {//true
            if(!success) return
            var v = modulesC.data.get(0)
            Ext.getCmp('smsModule').setValue(v)
            //Ext.getCmp('ussdModule').setValue(v)
        }}
        /*,data : [
         {d:'module1 "+375297776677"'}
        ,{d:'module2 "+375291234567"'}
        ]*/
    })
//++ MongoDB collections
    ,tain = Ext.create('Ext.data.Store',{
        storeId: 'tain'
        ,pageSize:pageSize
        ,idProperty:'_id'
        ,model: 'tain'
        ,proxy: { type: 'ajax' ,url: 'tain.json'
            ,reader: { type:'json' ,root:'data'}
        }
        ,autoSync: !true ,autoLoad: !true /*{ callback: function (rec, op, success) {//true
            /*if(!success) return
            var v = modulesC.data.get(0)
            Ext.getCmp('smsModule').setValue(v)
            Ext.getCmp('ussdModule').setValue(v)* /
            Ext._log('tain load: ' + success)
        }}*/
    })
    ,taout = Ext.create('Ext.data.Store',{
        storeId: 'taout'
        ,pageSize:pageSize
        //out: dateQ ,dateS ,sid ,dateR ,num ,m ,moduleN(fact) ,qid(trace back) ,_id
        /*,idProperty:'_id'*/
        ,model: 'taout'
        ,proxy: { type: 'ajax' ,url: 'taout.json'
            ,reader: { type:'json' ,root:'data'}
        }
        ,autoSync: !true ,autoLoad: !true
    })
    ,taq = Ext.create('Ext.data.Store',{
        storeId: 'taq'
        ,pageSize:pageSize
        //q: dateQ ,m ,num ,moduleN(proposed) ,_id
        /*,fields: ['dateQ' ,'m' ,'num' ,'module' ,'_id']
        ,idProperty:'_id'*/
        ,model: 'taq'
        ,proxy: { type: 'rest' ,url: '/taq.json'
            ,reader: { type:'json' ,root:'data'}
        }
        ,autoSync: !true ,autoLoad: !true
    })
    Ext.ui_reloadcb = { callback: function(records, operation, success){
        if(!success) Ext.Msg.show({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
        ,title:"БД получение" ,msg:"Ошибка при загрузке полученных сообщений."})
    }}
//++ Global store refs can be Ext.getStore()
    Ext.smspasteS = Ext.create('Ext.data.Store',{
        storeId: 'smspaste'
        //smspaste: send pasted data into `taq` collection
        ,fields: ['rcp' ,'txt' ,'mod']
        ,proxy: { type: 'rest' ,url: '/smsq.json' ,batchActions: true
            ,reader: { type:'json' ,idProperty:'_id' ,root:'data'}
            ,writer: { type:'json' ,allowSingle: false}
        }
        ,autoSync: !true ,autoLoad: !true
    })

    //ISO date format
    Ext.Date.defaultFormat = 'c'

    function _ti(){ //ISO time String
        function pad(n){return n<10 ? '0'+n : n}
        var d = new Date()
        return '@[T<b>'
        + pad(d.getUTCHours())+'<blink style="color:orange">:</blink>'
        + pad(d.getUTCMinutes())+'<blink style="color:orange">:</blink>'
        + pad(d.getUTCSeconds())+'</b>Z] '
    }
    Ext._ti = _ti

    function _date(){ //ISODateString
        function pad(n){return n<10 ? '0'+n : n}
        var d = new Date()
        return d.getUTCFullYear()+'-'
        + pad(d.getUTCMonth()+1)+'-'
        + pad(d.getUTCDate())+'T'
        + pad(d.getUTCHours())+':'
        + pad(d.getUTCMinutes())+':'
        + pad(d.getUTCSeconds())+'Z'
    }

    Ext.taqTxtInfo = function(v){
        if(v.udh){
            v = 'Длинная SMS, часть № <b>' + parseInt(v.udh.substr(2,2),16) + '</b> из [<b class="b">' + parseInt(v.udh.substr(0,2),16) + '</b>]'
        } else {
            v = 'Символов: [<b class="b">' + v.m.length + '</b>]'
        }
        return v
    }
    Ext.taqRndr = function(v){
    return '<b class="b">'+dateRndr(v.dateT)+'</b>' + (
        v.dateT ? '<br/>Результат: <b class="r">'+v.sid+'</b>&nbsp;Модуль: <b class="r">'+v.module+'</b></p>':''
      )
    }

    function smodRndr(v){
        return v ? v : '<b style="color:green;">Любой модуль</b>'
    }

    function dateRndr(v){
/*		var val = parseFloat(v)
    if (Ext.isNumber(v)) {
        if (val > 0) {
            return '<span class="g">' + val + '</span>';
        } else if (val <= 0) {
            return '<span class="r">' + val + '</span>';
        }
        return val
    }
    return v
        Ext._log (val)
        var val = v ? String(v) : ''
*/
        if(v) {
            return Ext.util.Format.dateRenderer()(v) //.call(this, v)
        } else {
            return '<b class="r">???</b>'
        }
    }
    Ext.dateRndr = dateRndr

function calc_sms_len(smsText) { // based on to_ascii() from uglify-js by Mihai Bazon
    var smsA = 140, smsU = smsA / 2
        ,smsC = 0
        ,a = true ,aa = true ,c = 0 ,tc = 0 ,ws

    if (Ext.csms) smsU -= 3

    smsText.replace(/[\u0000-\uffff]/g, function(ch) {
        var co = ch.charCodeAt(0)
        a = a && (128 > co)
        ++tc
        ++c
        if (/[ .,\n\r:;!?]/.test(ch)) ws = c
        if(a) {
            if(smsA == c ) { ++smsC ; tc -= c ; c = 0 }
            if(aa) aa = !true
        } else {
            if (c > smsU && c <= smsA && !aa) {
                if (ws) { ++smsC ; tc -= ws ; c -= ws ; ws = 0 }
                   else { ++smsC ; tc -= c - 1 ; c -= 1 }
                aa = true
                a = true
            }
            if(smsU == c) {
/*                if (ws) { ++smsC ; tc -= ws ; c -= ws ; ws = 0 }
                   else { ++smsC ; tc -= c ; c = 0 }*/
                ++smsC ; tc -= c ; c = 0
                if(aa) aa = !true
                a = true
            }
        }
    })
    if(tc) ++smsC
    return smsC
}
    Ext.calc_sms_len = calc_sms_len
// отображние
    Ext.QuickTips.init();

// event handlers
var ussdP ,ussdH = function(){
    var form = this.up('form').getForm()
        ,t = this, ussdnum = Ext.ComponentManager.get('ussdNumber')
        ,v = ussdnum.getRawValue()

        if(!ussdP.loadMask)
            ussdP.loadMask = new Ext.LoadMask(ussdP, { msg:"Получение ответа..." })

        if(/^Отп/.test(t.text)) {
            if (!v) {
                Ext.Msg.alert("USSD: форма", "Значение номера не определено!")
                return
            }
            Ext._log(v)
            if (!String(v).replace(/^\s+$/g,'')) {
                Ext._ussd('<b class="r">Пустой номер не посылается.</b>')
                return
            }
        } else if(/^Пол/.test(t.text)) {
            ussdnum.setRawValue('*100#')
        } else return Ext._log('err USSD: Кнопка не распознана!')
        ussdP.loadMask.show()
        form.submit({
            success: function(form, conn){
                Ext._ussd(t.text+' "<b style="color:black">' + ussdnum.getRawValue() +'</b>": OK.<br/>'
                +'<b style="color:blue">' + conn.result.msg
                +'</b>')
                tain.loadPage(1, Ext.ui_reloadcb)
                ussdP.loadMask.hide()
                app_tabs.setActiveTab('incomeinfo')
            }
            ,failure: function(form, conn){
                var r, es = t.text+': <b class="r">Ошибка.</b><br/>'
                if (conn.result && conn.result.msg) { // application error
                    es += conn.result.msg
                } else { // http server error
                    es += 'Тип глюка: ' + conn.failureType + '<br/>Описалово:<br/>'
                        + (conn.response.responseText
                        ? conn.response.responseText.replace(/(\r*\n)+/g, '<br/>')
                        : conn.response.statusText)
                }
                Ext._ussd(es)
                ussdP.loadMask.hide()
            }
        })
    }
    ,smsTextLenH = function (self ,e ,eOpts) {
        if(e) {// delay calc for better UI
            clearTimeout(Ext.__to)
            Ext.__to = setTimeout(smsTextLenH, 777)
            return
        }
        var l = Ext._smsb.getRawValue() ,n = calc_sms_len(l) ; l = l.length
        with (Ext._smsbtn) {
            if(l){
                l = '<b class="wg">Отправить</b> немедленно: '+n+' SMS (символов: '+l+')'
                if(disabled) disabled = !true
            } else {
                l = 'Нельзя отправить: '+n+' SMS (символов: '+l+')'
                disabled = true
            }
            setText(l)
        }
        return n
    }
    ,smsFormH = function(){
    var form = this.up('form').getForm()
        ,t = this
        ,m
        ,em = 'Нельзя отправить: ? SMS (символов: 0)'

        if(/Отчист/.test(t.text)) {
            Ext._smsb.setRawValue('')
            return Ext._smsbtn.setText(em)
        } else if(/Отп/.test(t.text)) {
            if(!form.getValues().smsNumber) {
                m = 'Номер пуст.'
                if(Ext._smsb.getRawValue().length <= 0)
                    m += ' SMS тоже...'
            } else if(Ext._smsb.getRawValue().length <= 0)
                m = 'Зачем отправлять пустую SMS?'
            if(m) return Ext.Msg.alert('SMS' ,m)
        } else return Ext._log('err SMS форма: Кнопка не распознана!')
        t.setText('Ушло на отправку в модуль')
        t.disabled = true

        form.submit({
            success: function(form, conn){
                Ext._log('SMS q: OK.<br/>'
                +'<b style="color:blue">' + conn.result.msg.replace(/(^[^"]+")|("[^"]+$)/g,'')
                +'</b>')
                t.setText(em)
                t.disabled = !true
                smsTextLenH(1,1)
                //Ext._smsb.setRawValue('')
                //Ext._log(t)
            }
            ,failure: function(form, conn){
                var r, es = 'SMS q: <b class="r">Ошибка.</b><br/>'
                if (conn.result && conn.result.msg) { // application error
                    es += conn.result.msg
                } else { // http server error
                    es += 'Тип глюка: ' + conn.failureType + '<br/>Описалово:<br/>'
                        + (conn.response.responseText
                        ? conn.response.status + ' '
                        + conn.response.statusText + '<br/>'
                        + conn.response.responseText.replace(/(\r*\n)+/g, '<br/>')
                        : conn.response.statusText)
                }
                Ext._log(es)
                Ext.Msg.show({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                ,title:"Ошибка SMS" ,msg:"Не возможно послать SMS. Технические детали: " + es})
                t.setText(em)
                t.disabled = !true
                smsTextLenH(1,1)
            }
        })
    }
    ,read_gsm_mem = function(){
    //var t = this //	Ext.Msg.alert('button: ' ,t.text)
        Ext.Ajax.request({
            url: 'gsmemr2.json'
            //,params: { unread: 1 }
            ,success: function(res, opts) {	//console.dir(Ext.decode(res.responseText))
                tain.loadPage(1, Ext.ui_reloadcb)
                //taq.loadPage(1, Ext.ui_reloadcb)
            }
            ,failure: function(res, opts) {
                Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                ,title:"Чтение памяти модулей" ,msg:"Ошибка чтения."})
                Ext._log("read_gsm_mem ajax err:" +
                     (res.responseText
                        ? res.status + ' '
                        + res.statusText + '<br/>'
                        + res.responseText.replace(/(\r*\n)+/g, '<br/>')
                        : res.statusText)
                )
            }
        })
    }
    ,delt_gsm_mem = function(){
        Ext.Ajax.request({
            url: 'gsmemd.json'
            ,success: function(res, opts) {	//console.dir(Ext.decode(res.responseText))
                //TODO: disable read button
                Ext.Msg.alert({icon: Ext.Msg.INFO ,buttons: Ext.Msg.OK
                ,title:"Удаление памяти модулей" ,msg:"Память отчищена."})
            }
            ,failure: function(res, opts) {
                Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                ,title:"Удаление памяти модулей" ,msg:"Ошибка отчистки."})
                Ext._log("read_gsm_mem ajax err:" +
                     (res.responseText
                        ? res.status + ' '
                        + res.statusText + '<br/>'
                        + res.responseText.replace(/(\r*\n)+/g, '<br/>')
                        : res.statusText)
                )
            }
        })
    }
    ,start_sendq = function(b ,e){
        if(0 == taq.totalCount)
            return
        Ext.Ajax.request({
            url: 'swtaqrun.json'
            ,success: function(res, opts) {
                //b.disable() better to update ui via server status array
                //if(!Ext.start_sendqb)
                //	Ext.start_sendqb = b
            }
            ,failure: function(res, opts) {
                Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                        ,title:"Обработка очереди swtaqrun" ,msg:"Ошибка запроса к ядру."})
                Ext._log("shedm ajax err:" +
                     (res.responseText
                        ? res.status+' '+res.statusText+'<br/>'+res.responseText.replace(/(\r*\n)+/g, '<br/>')
                        : res.statusText)
                )
            }
        })
    }
    ,taqdropH = function(b ,e){
        if(0 == taq.totalCount)
            return
        Ext.Ajax.request({
            url: 'taq.json?'
            ,method: 'DELETE'
            ,success: taq_load
            ,failure: function(res, opts) {
                Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                        ,title:"Отчистка очереди taq" ,msg:"Ошибка запроса к ядру."})
                Ext._log("http err:" +
                     (res.responseText
                        ? res.status+' '+res.statusText+'<br/>'+res.responseText.replace(/(\r*\n)+/g, '<br/>')
                        : res.statusText)
                )
            }
        })
    }

/*.submit({
            success: function(form, conn){
                Ext._log('SMS q: OK.<br/>'
                +'<b style="color:blue">' + conn.result.msg.replace(/(^[^"]+")|("[^"]+$)/g,'')
                +'</b>')
                t.setText(em)
                t.disabled = !true
                smsTextLenH(1,1)

                //Ext._smsb.setRawValue('')
                //Ext._log(t)
            }
            ,failure: function(form, conn){
                var r, es = 'SMS q: <b class="r">Ошибка.</b><br/>'
                console.log(conn)
                if (conn.result && conn.result.msg) { // application error
                    es += conn.result.msg
                } else { // http server error
                    es += 'Тип глюка: ' + conn.failureType + '<br/>Описалово:<br/>'
                        + (conn.response.responseText
                        ? conn.response.status + ' '
                        + conn.response.statusText + '<br/>'
                        + conn.response.responseText.replace(/(\r*\n)+/g, '<br/>')
                        : conn.response.statusText)
                }
                Ext._log(es)
                t.setText(em)
                t.disabled = !true
                smsTextLenH(1,1)
            }
        })*/

    Ext.smspasteH = function(txt) {
        var i ,j = 0 ,darr = [] ,larr

        if (/\t"/.test(txt) && /"\n/.test(txt)){
            larr = txt.replace(/\t"/g,'\t').replace(/"\n/g ,'\u0001').replace('""' ,'"').split('\u0001')
        } else larr = txt.split('\n')
      do {
        if (!larr) break
        var mod = Ext.getCmp('ussdModule').getValue()
        for(i in larr) {
            j = larr[i].split('\t')
            if(j && j.length > 0)
                if (j[0] && j[1] && /^[+]/.test(j[0]))
                    darr.push([j[0] ,j[1] ,j[2] ? j[2] : mod ])
        }
        if(darr.length > 0) {
            Ext.smspasteS.loadData(darr)
            cvlm.hide()
            i = Ext.getCmp('pasteSMS')
            i.update()
            i = i.down('toolbar')
            i.getComponent('addsmsq').enable()
            i.getComponent('rmsmsq').enable()
            prep_tabs.up('panel').expand()
            prep_tabs.setActiveTab('prepgrid')
            return Ext.Msg.alert({icon: Ext.Msg.INFO ,buttons: Ext.Msg.OK
            ,title:"CTRL+V: Вставка"
            ,msg:"Содержимое буфера обмена вставлено в таблицу предварительных SMS."})
        }
      } while (false)
        cvlm.hide()
        Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
            ,title:"CTRL+V: Вставка"
            ,msg:"Содержимое буфера обмена не может быть распознано как строки SMS:<br/><br/>"+
            "<b>+375 29 8077782  </b>tab<b>  Текст сообщения</b><br/>"+
            "т.е. номер в международной форме, символ табуляции, тест сообщения"})
    }
//++ patches
Ext.override(Ext.view.AbstractView, {
    loadMask: {
        msg: 'загрузка...'
    }
    ,onRender: function()
    {//Rovak: http://www.sencha.com/forum/showthread.php?198341-4.1-Loading-mask
        var me = this;

        this.callOverridden();

        if (me.mask && Ext.isObject(me.store)) {
            me.setMaskBind(me.store);
        }
    }
})

    Ext.fly('startup').remove()
var app_tabs ,prep_tabs
    ,vp = Ext.create('Ext.Viewport', {
        layout: { type: 'border', padding: 5 }
        ,frame: false
        ,border: false
        ,bodyStyle: 'background:transparent'

        ,defaults: { split: true }
        //без 'xtype' берётся как 'panel'
        ,items: [{ 			region: 'north'//, xtype:'container'
///////////////////////////
            ,header: !true, border: false
            ,collapseMode: 'mini'
            ,collapsible: true, collapsed: false //, split: true
            ,minHeight: 170
            ,maxHeight:333
            ,frame: false
            ,border: false
            ,bodyStyle: 'background:transparent'

            ,layout: 'fit'
            ,items: [ prep_tabs = Ext.createWidget('tabpanel', {
                activeTab: 1
                ,defaults :{
                    bodyPadding: 2
                },
        items: [
        { title: 'Подготовка одинаковых SMS'
            ,layout:'fit'
            ,items: [
                 Ext.create('Ext.form.Panel', {
        url: 'sms.json'
        ,layout: { type: 'hbox'
            ,padding: '5'
        }
        //,layout:'anchor'
        ,items: [
    { xtype: 'fieldset'
        ,title: 'Форма отправки одинаковых SMS'
        ,defaultType: 'textfield'
        ,padding:2
        //,height:111
        //,width:377
        //,flex:1
        ,items:[
        {   xtype: 'combobox'
            ,width:355
            ,fieldLabel:'Номер(а) получателя(ей разделители [ ,.;|/] )'
            ,labelAlign:'top'
            //,labelWidth:200
            ,id: 'smsNumber'
            ,name: 'smsNumber'
            ,store: phonesC
            ,queryMode: 'local'
            ,displayField: 'd'
            ,valueField: 'n'
        }
        ,{  xtype: 'textarea'
            ,style: 'margin:0', hideLabel: true
            ,height:70, width:355
            ,name: 'smsBody'
            ,id: 'smsBody'
            ,enableKeyEvents: true
            ,listeners: {
                //keyUp: smsTextLenH
                change: smsTextLenH
            }
        }
        ,{   xtype: 'combobox'
            ,width:355 //, anchor: '-5 -5'
            ,fieldLabel:'Модуль (SIM) для отправки'
            ,labelAlign:'top'
            //,labelWidth:200
            ,id: 'smsModule'
            ,name: 'smsModule'
            ,store: modulesC
            ,editable:!true
            //,queryMode: 'local'//ComboBox : default is 'remote' for autocomplete
            ,displayField: 'd'
            ,valueField: 'ownum'
            ,value: modulesC.data.get(0)
        }
        ,{	xtype:'container'
            ,layout: { type:'hbox', pack: 'center' }
                ,width:355
                ,items: [
                {  xtype: 'button'
                ,text: 'Нельзя отправить: ? SMS (символов: 0)'
                ,id: 'smsQueueBtn'
                ,handler: smsFormH
                ,width: (355-81)
                }
                ,{  xtype: 'button'
                ,text: '<b class="r">Отчистить</b>'
                ,width:81
                ,handler: smsFormH
                }
            ]
        }

        /*,dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'center'
            },
            items: [{
                minWidth: 80,
                text: 'Send'
            },{
                minWidth: 80,
                text: 'Cancel'
            }]
        }]*/

        ]
    }
    ,{ xtype: 'fieldset'
        ,title: 'Описание и помощь в работе.'
        ,layout:'anchor'
        ,height: 210
        ,width:606
        ,style: 'margin:0 0 0 4;padding:0 2 0 2;'
        ,html: '<p>&nbsp;&nbsp;&nbsp;&nbsp;Поле "Номер(а)" может содержать один или несколько номеров, предствленных <b>только</b> в международном формате "+375 ZX YYYYYYY". Короткие номера набираются с <b>перфиксом</b>, пример: "<b>!</b>0870250". </p><p>&nbsp;&nbsp;&nbsp;&nbsp;Список номеров лучше подготовить в ячейках <b style="color:green">Excel</b>, таблицах или простой строке <b style="color:blue">Word</b> и скопировав область там, вставить её здесь.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Вставка буфера обмена в текстовые поля осуществляется через <b>CTRL+INS</b> или локальное меню (мышью). Вставка <b>CTRL+V</b> активирует и пытается заполнить вкладку "Подготовка различных SMS". </p><p>&nbsp;&nbsp;&nbsp;&nbsp;Содержание сообщения может быть как из латинских (ASCII) так и прочих (UNICODE) символов. При этом максимальный размер первых SMS будет <b>140</b> символов, вторых <b>70</b> (на половину меньше). В режиме составных SMS, каждая часть не более <b>67</b> символов UNICODE.</p>&nbsp;&nbsp;&nbsp;&nbsp;Сколько SMS получается расчитывается и указывается на кнопке <b class="wg">Отправки</b>. При нажатии на неё, все SMS отправляются. В случае успеха они появляются во вкладке - "Отправленные SMS".'
    }
  ]
    })
            ]
        }
        ,{ title: 'Подготовка различных SMS из таблиц (MS Excel, текстовые файлы)'
            ,layout:'fit'
            ,id: 'prepgrid'
        ,frame: false
        ,border: false
        ,bodyStyle: 'background:transparent'

            ,items: [

     Ext.create('Ext.form.Panel', {
        url: 'sms.json'
        ,layout:'fit'
        ,frame: false
        ,border: false
        ,bodyStyle: 'background:transparent'

        //,margin: 4
        //,layout: { type: 'vbox'
        //    ,padding: '5'
        //}
        ,items: [
    /*{ xtype: 'fieldset'
        ,title: 'Описание работы. Помощь.'
        ,defaultType: 'textfield'
        ,padding:2
        ,height:57
        //,width:377
        //,flex:1
        ,html: '<div style="float:left"><img src="images/ccxlscv.png"/></div><div style="float:left;margin: 0 11px 0 11px;text-align:right">Скопировать область SMS<br/>из <b style="color:green">XLS</b>, вставить сюда:</div><textarea  style="background-color:#CBE5C5;border:1px dashed;margin:0 11px 0 0;padding:0;height:30px;width:222px;float:left;" oninput="' + "Ext._log(this.value);setAttribute('value','')" + '"></textarea><b style="font-family:monospace;color:orange"><b style="color:blue"><b style="color:green">XLS</b>: CTRL+C</b><br/>:тут CTRL+V</b>'
    }
    ,*/{ 	xtype:'grid' ,id:'pasteSMS'
        //,anchor: '0 -31'
        ,header:!true
        //,frame: false
        ,border: false
        //,bodyStyle: 'background:transparent'

        ,layout:'fit'
        ,store: Ext.smspasteS
        ,viewConfig: { loadMask: !true
        }
        //,selType: 'rowmodel'
        ,selType: 'cellmodel'
        ,selModel: {mode: 'SIMPLE'}
        ,columns: [
            Ext.create('Ext.grid.RowNumberer')
            ,{
                xtype:'actioncolumn',
                width:22,
                items: [{
                    icon: 'images/delete.png'
                    ,tooltip: 'Удалить'
                    ,handler: function(gridview, rowIndex, colIndex){
                        if(1 == gridview.store.getCount()){
                            var b = Ext.getCmp('pasteSMS').down('toolbar')
                            b.getComponent('addsmsq').disable()
                            b.getComponent('rmsmsq').disable()
                        }
                        Ext.animateNode(gridview.getNode(rowIndex), 1, 0, {
                            afteranimate: function(){
                                gridview.store.removeAt(rowIndex)
Ext._log("rowIndex, colIndex: " + rowIndex + ", " +colIndex)
                                gridview.refresh()
                            }
                        })
                    }
                }]
            }
            ,{text: 'Получатель', width: 177, dataIndex: 'rcp'
                ,editor: {	xtype:"combobox"
                ,typeAhead: true
                //,triggerAction: 'all'
                ,selectOnTab: true
                ,store: phonesC
                ,queryMode: 'local'
                ,displayField: 'd'
                ,valueField: 'n'
                //listClass: 'x-combo-list-small'
                }
                ,renderer: function(value, metadata, record, rowIndex, colIndex, store){
                  return metadata.tdAttr = editt, value
                    //metadata.tdAttr = 'data-qtip="' + value + '"'
                }
            }
            ,{text: 'Сообщение', flex: 1, dataIndex: 'txt' ,tdCls: 'wrap'
                ,editor: { xtype:"textarea"
                    ,resizable: true ,height: 111 ,width: 444
                }
                ,renderer: function(value, metadata, record, rowIndex, colIndex, store){
                  return metadata.tdAttr = editt, value
                }
            }
            ,{text: 'Номер модуля отправки', width: 177, dataIndex: 'mod'
                ,editor: {	xtype:"combobox"
                ,typeAhead: true
                //,triggerAction: 'all'
                ,selectOnTab: true
                ,store: modulesC
                ,queryMode: 'remote'
                ,displayField: 'd'
                ,valueField: 'ownum'
                //listClass: 'x-combo-list-small'
                }
                ,renderer: function(value, metadata, record, rowIndex, colIndex, store){
                  return metadata.tdAttr = editt, value
                    //metadata.tdAttr = 'data-qtip="' + value + '"'
                }
            }

        ]
        ,plugins: [{ ptype: 'rowexpander'
            ,expandOnDblClick: false ,expandOnEnter: false
            ,rowBodyTpl: '<p style="border-bottom: blue solid 1px"><b>Текст: </b>{txt}</p>'
+'<p>Символов: <b style="color:blue;padding-right:11"> {[values.txt.length]}</b>'
+'Количество SMS: '
+'<b style="color:blue;">{[values.txt.length > 0 ? Ext.calc_sms_len(values.txt): "??"]}</b>'
+'</p>'
        }
        //,Ext.create('Ext.ux.grid.plugin.DragSelector', {})
        ,Ext.create('Ext.grid.plugin.CellEditing', { clicksToEdit: 1
            ,listeners: {
                edit: function(editor ,event){
                    with (event.grid.getView()){
                        onCellSelect({ row: event.rowIdx ,column: event.colIdx })
                        getEl().focus()
                    }
                }
            }
        })
        ]
        ,collapsible: true
        ,animCollapse: false
        ,dockedItems: [{
            xtype: 'toolbar',
            items: [
            { text:'Добавить строку'
                ,iconCls:'addrow'
                ,handler: function(b, e) {
                    Ext.smspasteS.add({})
                    b = b.up('toolbar')
                    b.getComponent('addsmsq').enable()
                    b.getComponent('rmsmsq').enable()
                }
            },{
                itemId: 'addsmsq'
                ,text:'Добавить в очередь отправки'
                ,iconCls:'add'
                ,disabled: !true
                ,handler: function(b, s, v){
        s = b.up('gridpanel')
        v = s.getView()
        lm.show()
        s = s.getStore()
        if(!s.sync({
            success: function(batch, opts){
                app_tabs.setActiveTab('sendqinfo')
                opts = s.getProxy().getReader().rawData
Ext._log('smsq add OK data.length: ' + opts.data.length)
                opts = opts.total / pageSize
                v.onCellSelect({ row:0 ,column:0 })
                v.onCellDeselect({ row:0 ,column:0 })
                s.removeAll()

                /*s = Math.floor(opts) //load last page
                taq.loadPage(opts - s ? s + 1 : s,{
                    callback: function(records, operation, success) {
                        if(!success) Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                        ,title:"БД очередь" ,msg:"Ошибка при получении очереди сообщений."})
                    }
                })*/

                taq_load()

                //b.disable()
                b.up('toolbar').getComponent('rmsmsq').disable()
                lm.hide()
            }
            ,failure: function(batch, opts){
                lm.hide()
                Ext.Msg.alert({ title:"БД очередь" ,icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                    ,msg:"Серьёзная ошибка при записи в очередь сообщений."})
            }
        })) { //sync
            lm.hide()
            Ext.Msg.alert({icon: Ext.Msg.INFO ,buttons: Ext.Msg.OK
            ,title:"БД очередь" ,msg:"Нечего переносить в очередь!"})
        }
                }
            }, '-'
            ,{   xtype: 'combobox'
                ,width:255 //, anchor: '-5 -5'
                ,fieldLabel:'Через номер'
                ,labelAlign:'left'
                ,labelWidth:75
                ,id: 'ussdModule'
                ,name: 'module'
                ,store: modulesC
                ,editable:!true
                //,queryMode: 'local'
                ,displayField: 'd'
                ,valueField: 'ownum'
                //,value: modulesC.data.get(0)
            }, '-'
            ,{
                itemId: 'rmsmsq'
                ,text: 'Удалить все'
                ,iconCls: 'remove'
                ,disabled: !true
                ,handler: function(b, e) {
                    Ext.smspasteS.removeAll()
                    b.up('toolbar').getComponent('addsmsq').disable()
                    b.disable()
                }
            }, '-'
            ,{ xtype: 'container'
        //,height:57
        ,html: '<div style="float:left"><img src="images/ccxlscv.png"/></div><a href="sms.xls"><div style="float:left;margin: 0 11px 0 11px;text-align:right">Скопировать <b style="color:brown">CTRL+C</b> таблицу SMS<br/>из <b style="color:green">XLS</b> или <b style="color:blue">DOC</b>, вставить сюда <b style="color:orange">CTRL+V</b>:</div></a>'
    }
            ]
        }]
  }
  ]
    })
            ]
        }
        ]})
            ]
          },{				region: 'west'
///////////////////////////
//            ,collapsible: true, split: true, minWidth: 100, minHeight: 140
            ,layout: 'border', title: 'Управление'
            ,collapsible: true, collapsed: !false, collapseMode: 'mini'
            ,floatable: true
            ,width: '14%'
            ,items: [{
                region: 'north', title: 'софт и железо / software and hardware'
                ,collapsible: true, autoScroll: true, split: true
                ,height: '65%'
                ,minHeight: 111
                //html: 'center center',
                ,items: [{
            xtype: 'dataview'
            ,itemId: 'id_swhw_stat'
            ,tpl: '<tpl for="."><div class="item">' +
'os: <b>{os}</b><br/>'+
'server: <b>{server}</b><br/>'+
'db: <b>{db}</b><br/>'+
'uptime: <b>{uptime}</b></div></tpl>'
            ,itemSelector: 'div.item'
            ,loadMask: false
            ,store: Ext.create('Ext.data.Store', {
//bugfix 001: autoLoad is false. log widgets, created later in Ext.onReady()
//            and they must have first nodeJS logs there otherwise this early load will eat them
                storeId: 'swhw' ,autoLoad: !true
                ,proxy: { type: 'ajax', url: 'swhw_stat.json', reader: { type: 'json', root: 'stats' } }
                ,fields: ['os', 'server', 'db', 'uptime' ]
              }
            )
                  }
                  /*, Ext.create('Ext.ProgressBar', {
                        text:'? качество сигнала'
                        ,itemId:'id_sigq1'
                        ,value: 1
                        }
                    )
                  , Ext.create('Ext.ProgressBar', {
                        text:'? качество сигнала'
                        ,itemId:'id_sigq2'
                        ,hidden: true
                        ,margin: '2 0 0 0'
                        ,value: 1
                        }
                    )*/
                  , { xtype:'container'
                        ,html:'<b id="gsmid"></b>'
                  }
                ],
                dockedItems: [{
                    xtype: 'toolbar', dock: 'bottom'
                    ,items:['управление:', ' ', { text: 'syncUI'
                        ,handler: function() {
                            //Ext.defer(Ext.wait_event, 0)
                            Ext.defer(Ext.sync_extjs_nodejs, 0)
                        }
                      },{ text: 'renodeJS'
                        ,handler: function() {
        Ext.Ajax.request({
            url: 'reload.json'
            ,success: function(res, opts) {}
            ,failure: function(res, opts) {
                Ext._log("reload ajax err:" +
                     (res.responseText
                        ? res.status + ' '
                        + res.statusText + '<br/>'
                        + res.responseText.replace(/(\r*\n)+/g, '<br/>')
                        : res.statusText)
                )
            }
        })
                        }
                      }
                    ]
                }
                ]
              },{
                region: 'center', title: 'ExtJS ' +	Ext.getVersion('extjs')+' info'
                ,height: '45%'
                ,split: true, collapsible: true, autoScroll: true
                ,html: '<a id="id_extjslog_head" href="extjs/docs/index.html" target="_blank"><b>_ExtJS_</b></a>'
              }
            ]
        },{                  region: 'center'
////////////////////////////
            ,id: 'smspanel'
            //,layout: 'border', border: false
            //,title: ''
            ,width: '77%'
            ,layout: 'fit', border: false
            ,items: [ app_tabs = Ext.createWidget('tabpanel', {
        //width: 450
        activeTab: 0
        ,defaults :{
            bodyPadding: 2

        },
        items: [{
            title: 'Очередь отправки'
            ,id:'sendqinfo'
            ,layout:'fit'
            ,iconCls: 'icon-grid'
            ,items: [
    { 	xtype:'grid'
        ,layout:'fit'
        ,bodyStyle: "background: #FFFFFF url(images/logo.png) no-repeat center !important"
        ,store: taq
        ,selType: 'cellmodel'
        ,viewConfig: { loadMask: true
            ,stripeRows: false// with this `true`, bellow stripes too
            ,getRowClass: function(record, rowIndex, rowParams, store){
                var n = record.get("n")
                return n ? 'E' == n ? "row-err" : "row-new" : '';
            }
        }
        ,columns: [
            Ext.create('Ext.grid.RowNumberer')
            ,{  xtype:'actioncolumn'
                ,width:22
                ,items: [{
                    icon: 'images/delete.png',
                    tooltip: 'Удалить',
                    handler: function(view, rowIndex, colIndex) {
                      Ext.animateNode(view.getNode(rowIndex), 1, 0, { afteranimate: function(){
                        taq.removeAt(rowIndex)
                        view.refresh()//doesn't work
                        taq.sync({
                            success: function(batch, opts){
                                /*taq.totalCount--//rFactor@http://stackoverflow.com/questions/4912426/
                                view.up('tabpanel').down('pagingtoolbar').onLoad()
                                view.up('tabpanel').down('pagingtoolbar').getPageData().currentPage
                                */
                                taq_load()
                            }
                            ,failure: function(batch, opts){
                                taq.rejectChanges()
                                view.refresh()
                                Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                                ,title:"БД очередь" ,msg:"Ошибка при удалении сообщения (восстановлено)."})
                            }
                        })
                      }})
                    }
                }]
            }
            ,{text: 'Текст' ,flex: 1 ,dataIndex: 'm' ,editor: { xtype:"textarea"
                ,resizable: true ,height: 111 ,width: 444 }
            }
            ,{text: 'Получатель', width: 111 ,dataIndex: 'num' ,editor: { xtype:"textarea"} }
            ,{text: 'Добавлено в', width: 177,renderer: dateRndr, dataIndex: 'dateQ'}
            ,{text: 'Через модуль / номер SIM', width: 177,renderer: smodRndr, dataIndex: 'mod'}
            //,{text: 'Статус', dataIndex: 'status', renderer : objStatus}
            //,{text: 'Время отправки/доставки', width: 177,renderer: dateRndr, dataIndex: 'endDate'}
        ]
        ,plugins: [{       ptype: 'rowexpander'
            ,expandOnEnter: false
            ,expandOnDblClick: false
            ,rowBodyTpl: '<p style="border-bottom: blue solid 1px"><b>Текст: </b>{m}</p>'
+'<p>{[Ext.taqTxtInfo(values)]}<br/>'
+'Последняя попытка: {[Ext.taqRndr(values)]}</p>'
        }
        ,Ext.create('Ext.grid.plugin.CellEditing', { clicksToEdit: 2})
        //,Ext.create('Ext.ux.grid.plugin.DragSelector', {})
        ]
        //collapsible: true
        //,animCollapse: false
        //title: '' //'Таблица: активные SMS',
        ,header: !true
        // inline buttons
        ,dockedItems: [{
            xtype: 'toolbar',
            items: [{
                itemId: 'taqctrl'
                ,id: 'swtaqrun'
                ,handler: start_sendq
                ,tooltip:'Включает/Выключает обработку очереди'
            }, '-'
            /*, { text:'Настройки',tooltip:'',iconCls:'option'
            },'-'*/
            ,{
                itemId: 'taqdrop'
                ,text:'Отчистить очередь'
                ,handler: taqdropH
                ,tooltip:'Удалить все SMS и остановить отправку'
                ,iconCls:'remove'
            }
            ,{
                itemId: 'loadButton'
                ,id: 'taq_loadButton'
                ,text:'Загрузить max 16 первых сообщений.' //,tooltip:''
                ,iconCls: Ext.baseCSSPrefix + 'tbar-loading'
                ,disabled: !true
                ,handler: taq_load
            }

            /*,{	xtype: 'pagingtoolbar'
                ,store: taq
                ,dock: 'top'
                ,beforePageText: 'страница'
                ,afterPageText: 'из {0}'
                ,displayInfo: true
                ,displayMsg: 'Записи с {0}-й по {1}-ю. Всего: {2}'
                ,emptyMsg: "Ничего не загружено"
            }*/
            ]
        }
        ]
    }
    //)
            ]
        },{
            title: 'Отправленные SMS'
            ,id: 'outinfo'
            ,closable: !true
            ,layout:'fit'
            ,iconCls: 'icon-grid'
            ,items:[
    { 	xtype:'grid'
        ,layout:'fit'
        ,bodyStyle: "background: #FFFFFF url(images/logo.png) no-repeat center !important"
        ,store: taout
                ,viewConfig: { loadMask: true
            ,stripeRows: false// with this `true`, bellow stripes too
            ,getRowClass: function(record, rowIndex, rowParams, store){
                store = record.get("dateS")
                return (!store) ? "row-err" : '';
            }
        }
        ,columns: [
            {xtype: 'rownumberer' ,width: 30}
            ,{text: 'Текст' ,flex: 1, dataIndex: 'm' ,editor: {xtype:"textfield"}}
            ,{text: 'Номер' ,width: 111 ,dataIndex: 'num'}
            ,{text: 'Статус',width: 30 ,dataIndex: 'sid'}
            ,{text: 'Время доставки' ,width: 177,renderer: dateRndr, dataIndex: 'dateR'}
        ]
        ,plugins: [{         ptype: 'rowexpander'
            ,rowBodyTpl: '<p style="border-bottom: blue solid 1px"><b>Текст: </b>{m}</p>'
+'<p>Количество символов: <b style="color:blue;padding-right:11"> {[values.m.length]}</b><br/>'
+'в очереди с: <b style="color:blue;">{[Ext.dateRndr(values.dateQ)]}</b> (время локальное)<br/>'
+'отослано: <b style="color:{[values.dateS ? "orange" : "red"]};">{[values.dateS ? Ext.dateRndr(values.dateS) : "Нет, ошибка: " + (values.sid ? values.sid : "??!")]}</b><br/>'
+'доставленно: <b style="color:green;">{[Ext.dateRndr(values.dateR)]}</b> (время GSM сети)<br/>'
+'через: <b style="color:brown;">{module}</b>'
        }
            ,Ext.create('Ext.grid.plugin.CellEditing' ,{ clicksToEdit: 2 })
        ]
        ,header: !true
        ,dockedItems: [{
            xtype: 'toolbar',
            items: [
            /*{
                text:'Прочитать из GSM'
                //,tooltip:'Добавить новый торговый объект для регистрации',
                ,iconCls:'add'
                ,,handler: Ext.smspasteS.removeAll
            }, '-'
            ,{
                itemId: 'removeButton'
                ,text:'Удалить из GSM'
                //,tooltip:'Принудительно деактивировать торговый объект'
                ,iconCls:'remove'
                ,disabled: !true
            }
            ,*/{	xtype: 'pagingtoolbar'
                ,store: taout
                ,dock: 'top'
                ,beforePageText: 'страница'
                ,afterPageText: 'из {0}'
                ,displayInfo: true
                ,displayMsg: 'Записи с {0}-й по {1}-ю. Всего: {2}'
                ,emptyMsg: "Ничего не загружено"
            }]
        }]
    }// grid
            ]// tab items
        },{
            title: 'Принятая информация'
            ,id: 'incomeinfo'
            ,closable: !true
            ,layout:'fit'
            ,iconCls: 'icon-grid'
            ,viewConfig: { loadMask: true
                ,stripeRows: false
            }
            ,items:[
    { 	xtype:'grid'
        ,layout:'fit'
        ,bodyStyle: "background: #FFFFFF url(images/logo.png) no-repeat center !important"
        ,store: tain
        ,columns: [
            {xtype: 'rownumberer' ,width: 30}
            ,{text: 'Текст' ,flex: 1, dataIndex: 'b'}
            ,{text: 'Номер' ,width: 111 ,dataIndex: 'num'}
            ,{text: 'Статус',width: 30 ,dataIndex: 'sid'}
            ,{text: 'Время' ,width: 177,renderer: dateRndr, dataIndex: 'd'}
        ]
        ,plugins: [{
            ptype: 'rowexpander',
            rowBodyTpl: '<p class="wwrap" style="border-bottom: blue solid 1px">{b}</p><p><b>Символов в тексте: <b style="color:blue;padding-right:11"> {[values.b.length]}</b></b><br/>'
+'<b>Модуль: <b style="color:blue;">{module}</b></b>'
+'<p><b>Raw text: </b>{m}</p>'
        }]
        ,header: !true
        ,dockedItems: [{
            xtype: 'toolbar',
            items: [
            {
                itemId: 'gsmemR'
                ,text:'Прочитать Статусы Доставки'
                ,tooltip:'Чтение памяти SMS всех модулей'
                ,iconCls:'add'
                ,handler: read_gsm_mem
                ,disabled: !true
            }, '-'
            ,{
                itemId: 'gsmemD'
                ,text:'Отчистить SIM'
                ,tooltip:'Отчистка памяти SMS всех модулей'
                ,iconCls:'remove'
                ,handler: delt_gsm_mem
                ,disabled: !true
            }
            ,{	xtype: 'pagingtoolbar'
                ,store: tain
                ,dock: 'top'
                ,beforePageText: 'страница'
                ,afterPageText: 'из {0}'
                ,displayInfo: true
                ,displayMsg: 'Записи с {0}-й по {1}-ю. Всего: {2}'
                ,emptyMsg: "Ничего не загружено"
            }]
        }]
    }// grid
            ]// tab items
        }
        /*,{
            title: 'Модули GSM'
            ,closable: !true
            ,layout:'border'
            ,iconCls: 'icon-tabs'
            ,items:[//{ 			region: 'north', xtype:'container'
///////////////////////////
            //,header: !true
            //,collapseMode: 'mini'
            //,collapsible: true, collapsed: false //, split: true

            //}
            {	region: 'north', xtype:'grid'
        ,collapsed: !true ,collapsible: true, split: true, height: 144, minHeight: 77
        //,minHeight:170
        //,maxHeight:217
        //,layout:'fit'
        ,store: taq
        ,selType: 'cellmodel'
        ,viewConfig: { loadMask: true
            ,stripeRows: false// with this `true`, bellow stripes too
            ,getRowClass: function(record, rowIndex, rowParams, store){
                var n = record.get("n")
                return n ? 'E' == n ? "row-err" : "row-new" : '';
            }
        }
        ,columns: [
            Ext.create('Ext.grid.RowNumberer')
            ,{  xtype:'actioncolumn'
                ,width:22
                ,items: [{
                    icon: 'images/delete.png',
                    tooltip: 'Удалить',
                    handler: function(view, rowIndex, colIndex) {
                      Ext.animateNode(view.getNode(rowIndex), 1, 0, { afteranimate: function(){
                        taq.removeAt(rowIndex)
                        view.refresh()//doesn't work
                        taq.sync({
                            success: function(batch, opts){
                                taq.totalCount--//rFactor@http://stackoverflow.com/questions/4912426/
                                view.up('tabpanel').down('pagingtoolbar').onLoad()
                            }
                            ,failure: function(batch, opts){
                                taq.rejectChanges()
                                view.refresh()
                                Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                                ,title:"БД очередь" ,msg:"Ошибка при удалении сообщения (восстановлено)."})
                            }
                        })
                      }})
                    }
                }]
            }
            ,{text: 'Текст' ,flex: 1 ,dataIndex: 'm' ,editor: { xtype:"textarea"
                ,resizable: true ,height: 111 ,width: 444 }
            }
            ,{text: 'Получатель', width: 111 ,dataIndex: 'num' ,editor: { xtype:"textarea"} }
            ,{text: 'Добавлено в', width: 177,renderer: dateRndr, dataIndex: 'dateQ'}
            ,{text: 'Предварительный канал', width: 177,renderer: smodRndr, dataIndex: 'pmodule'}
            //,{text: 'Статус', dataIndex: 'status', renderer : objStatus}
            //,{text: 'Время отправки/доставки', width: 177,renderer: dateRndr, dataIndex: 'endDate'}
        ]
        ,plugins: [{       ptype: 'rowexpander'
            ,expandOnEnter: false
            ,expandOnDblClick: false
            ,rowBodyTpl: '<p style="border-bottom: blue solid 1px"><b>Текст: </b>{m}</p>'
+'<p>{[Ext.taqTxtInfo(values)]}<br/>'
+'Последняя попытка: {[Ext.taqRndr(values)]}</p>'
        }
        ,Ext.create('Ext.grid.plugin.CellEditing', { clicksToEdit: 2})
        //,Ext.create('Ext.ux.grid.plugin.DragSelector', {})
        ]
        //collapsible: true
        //,animCollapse: false
        //title: '' //'Таблица: активные SMS',
        ,header: !true
        // inline buttons
        ,dockedItems: [{
            xtype: 'toolbar',
            items: [{
                text:'Отправить очередь SMS' //,tooltip:''
                ,iconCls:'add'
                ,handler: start_sendq
            }, '-'
            /*, { text:'Настройки',tooltip:'',iconCls:'option'
            },'-'* /
            ,{
                itemId: 'removeButton'
                ,text:'Остановить отправку SMS' //,tooltip:''
                ,iconCls:'remove'
                ,disabled: true
            }
            ,{	xtype: 'pagingtoolbar'
                ,store: taq
                ,dock: 'top'
                ,beforePageText: 'страница'
                ,afterPageText: 'из {0}'
                ,displayInfo: true
                ,displayMsg: 'Записи с {0}-й по {1}-ю. Всего: {2}'
                ,emptyMsg: "Ничего не загружено"
            }
            ]
        }
        ]
    }
    ,{                  region: 'center'
        ,xtype:'panel' ,collapsed: !true ,collapsible: true, split: true
        ,header: !true
        //,height: '100%' //200, minHeight: 120
////////////////////////////
        //,id: 'smspanel'
        ,layout: 'border', border: false
        //,title: ''
        //,width: '77%'
        //,layout: 'fit'
        ,items: [ { region: 'center', title: 'Логи модуля'
                ,autoScroll: true, minWidth: 80
                ,html: '<div style="color:green"><b id="id_gsmlog_head">_gsm_</b></div>'
              }
        ,Ext.create('Ext.grid.property.Grid', {
    region: 'west',collapsed: !true ,collapsible: true, split: true
    ,title: 'Настройки модуля'
    ,width: 300
    ,renderTo: Ext.getBody()
    ,source: {
        "(name)": "My Object",
        "Created": Ext.Date.parse('10/15/2006', 'm/d/Y'),
        "Available": false,
        "Version": 0.01,
        "Description": "A test object"
    }
})

        ]
    }
            ]
        }*/
        ]
        ,plugins: [
            Ext.create('Ext.ux.TabReorderer')
        /*,{
                ptype: 'tabscrollermenu'
                //,maxText  : 15
                //,pageSize : 5
            }*/
        ]
                })
            ]
          },{             region: 'east'
//////////////////////////
            ,title: 'Отправка USSD', collapseMode: 'mini'
            ,collapsible: true, collapsed: !true, floatable: true, split: true
            ,minWidth: 120, minHeight: 140, width: 200
            ,layout: { type: 'vbox', align: 'stretch', padding: 5 }
            ,layout: 'border'
            ,items: [{	region: 'north'
                ,items: [ ussdP = Ext.create('Ext.form.Panel', { layout: { type: 'vbox'
        ,align: 'stretch', padding: 5 }
        ,border: false
        //,title: 'Отправка USSD'
        ,height: 100
        ,url: 'ussd.json'
        ,items: [
            {   xtype: 'combobox'
                //,fieldLabel: 'Отправить USSD'
                ,labelAlign:'top'
                ,id: 'ussdNumber'
                ,name: 'ussdNumber'
                ,store: ussdC
                ,queryMode: 'local'
                ,displayField: 'd'
                ,valueField: 'n'
            }
/*			,{   xtype: 'combobox'
                ,width:377 //, anchor: '-5 -5'
                ,fieldLabel:'Модуль (SIM) для отправки'
                ,labelAlign:'top'
                //,labelWidth:200
                ,id: 'ussdModule'
                ,name: 'module'
                ,store: modulesC
                ,editable:!true
                //,queryMode: 'local'
                ,displayField: 'd'
                ,valueField: 'ownum'
                ,value: modulesC.data.get(0)
            }*/
            ,{  xtype: 'button'
                ,text: 'Отправить запрос'
                ,handler: ussdH
            }
            ,{  xtype: 'button'
                ,text: 'Получить баланс'
                ,handler: ussdH
            }
        ]
    })
            ]}
            ,{	region: 'center'
                ,autoScroll: true
                ,items: [
                {	xtype: 'component'
                    ,html: '<b id="id_ussdnum"></b><div style="color:green"><b id="id_ussdlog_head">_USSD_</b></div>'
                }
                ]
            }
            ]
          }
          /*,{              region: 'south', title: 'Сообщения / Logs and info'
///////////////////////////
            ,collapsed: true ,collapsible: true, split: true, height: 200, minHeight: 120
            ,layout: { type: 'border', padding: 5 }
            /*,items: [{
                region: 'center', title: 'GSM/SMS инфо'
                ,autoScroll: true, minWidth: 80
                ,html: '<div style="color:green"><b id="id_gsmlog_head">_gsm_</b></div>'
              },{
                region: 'east', title: 'Логи приложения / nodeJS app logs '
                ,autoScroll: true, flex: 1, minWidth: 80, split: true, collapsible: true
                ,html: '<b id="id_srvlog_head">_srv_</b>'
              }, {
                region: 'west', title: 'Ошибки приложения / nodeJS app errors '
                ,autoScroll: true, flex: 1, minWidth: 80, split: true, collapsible: true, collapseMode: 'mini'
                ,html: '<div class="r"><b id="id_errlog_head">_err_</b></div>'
              }
            ]
          }*/
        ]
    })
    Ext.app_tabs = app_tabs
    Ext._vp = vp
    Ext._op = ''
    Ext._log = function(msg, log) {
        if (!log) log = Ext._logview
        if (/^err/.test(msg)) {
            msg = '<div class="r">'+msg+'</div>'
        }
        Ext.DomHelper.insertBefore(log, msg + "<br/>")
        log.scrollIntoView(false)
        if(console) console.log(msg)
    }

    Ext.Error.handle = function(err) {
        Ext._log(err)
        //if (err.someProperty == 'NotReallyAnError') {
            // maybe log something to the application here if applicable
        //	return true;
        //}
        // any non-true return value (including none) will cause the error to be thrown
    }

    Ext._ussd = function(msg) {
        Ext._log(msg, Ext._ussdlogview)
    }
    Ext.smsTextLenH = smsTextLenH

    Ext.cp = document.getElementById('cp')
    Ext.sheets.pasteSMS = Ext.getCmp('pasteSMS')
    var lm = new Ext.LoadMask(Ext.sheets.pasteSMS, {msg:'добавление...'})

    function clipboardCopy(grid){
    console.log(arguments)
        var /*grid = Ext.getCmp('tab0grid') ,*/store = grid.getStore()
            ,r = grid.getSelectionModel().getSelection()
            ,h = grid.headerCt.getGridColumns() ,i ,j
        Ext.cp.value=''
        for(i in r){
            i = store.getAt(r[i].index) ,j = 0
            do if(h[j].dataIndex) Ext.cp.value += i.get(h[j].dataIndex) + ((j+1) < h.length ? '\t':'')
            while (++j < h.length)
            Ext.cp.value += '\n'
        }
        Ext.cp.focus()
    }
    function clipboardPaste(grid){
        return Ext.smspasteH(Ext.cp.value)
    console.log(arguments)
        var /*grid = Ext.getCmp('tab0grid') ,*/store = grid.getStore()
            ,r = grid.getSelectionModel().getSelection()[0].index
            ,h = grid.headerCt.getGridColumns() ,i ,j ,rr
            ,rows = Ext.cp.value.split('\n') ,cols ,ci
        if(rows.length <= 0) return
        i = rows.length - 1
        if(r) r += i
        else return Ext.Msg.alert({icon: Ext.Msg.ERROR ,buttons: Ext.Msg.OK
                ,title:"Добавление новых строк"
                ,msg:"Перед возможностью копировать/вставить, строки нужно сохранить."})
        for(ci in h)
            if(h[ci].dataIndex) break
        do {
            cols = rows[i].split('\t')
            if(cols.length <= 0) continue
            rr = store.getAt(r)
            for(j in cols)
                if(cols[j]) rr.set(h[parseInt(j)+parseInt(ci)].dataIndex, cols[j])
        } while (--r,i--)
    }
    var cvlm = new Ext.LoadMask(vp, {msg:'обработка буфера обмена...'})
    vp.on('render' ,function(){
        var grid = Ext.sheets.pasteSMS
                //if(!grid) return //too fast
                //console.log(grid)
                //console.log(Ext.cp)
                //grid.reconfigure(store, meta.columns)
                var map = new Ext.util.KeyMap({
                    target: vp.getEl().id,
                    binding: [{
                        key: "v",
                        ctrl:true,
                        fn: function(){
                            cvlm.show()
                            with(Ext.cp) value='' ,focus()
                            Ext.defer(function(){
                                clipboardPaste(grid)
                            }, 256)
                        }
                    }, {
                        key: "c" ,ctrl:true
                        ,fn: function(){
                            clipboardCopy(grid)
                        }
                    }]
                })
    }, this, {single: true})
    vp.fireEvent('render')

    //Ext._smsp = Ext.ComponentManager.get('smspanel')
    Ext._smsb = Ext.ComponentManager.get('smsBody')
    Ext._smsbtn = Ext.ComponentManager.get('smsQueueBtn')
    Ext._logview = document.getElementById('id_extjslog_head')
    Ext._ussdlogview = document.getElementById('id_ussdlog_head')
    Ext._ussdnum = document.getElementById('id_ussdnum')

    /* /Ext fix: have event from mouse paste data (mouse cut doesn't work too
    Ext.get('smsBody').down('textarea', true).onpaste = Ext.smsTextLenH*/

    var sync_info = Ext._vp.down('#id_swhw_stat').store
        ,srvlog = null //document.getElementById('id_srvlog_head')
        ,gsmlog = document.getElementById('id_gsmlog_head')
        ,errlog = document.getElementById('id_errlog_head')
        ,sigq1 = Ext._vp.down('#id_sigq1')
        ,sigq2 = Ext._vp.down('#id_sigq2')
        ,sync_extjs_nodejs = function(){
            if(Ext.sync_clearTimeout) clearTimeout(Ext.sync_clearTimeout)
            Ext.sync_clearTimeout = Ext.defer(sync_extjs_nodejs, 7777)
            sync_info.load(function(recs, op, noerr) {
            var sd = sync_info.getProxy().getReader().rawData
                ,d = Ext._ti()
                ,sigqv1	,sigqv2
                ,t

            //UI ctrl
            if(sd.csms)
                Ext.csms = true

            if(sd.taq_run){
                with(Ext.getCmp('swtaqrun')){
                    t = getText()
                    if(!t || getText()[0] != "О"){
                        setText('Остановить отправку SMS')
                        setIconCls('remove')
                        taq_load()
                    }
                }
            } else {
                with(Ext.getCmp('swtaqrun')){
                    t = getText()
                    if(!t || getText()[0] != "Н"){
                        setText('Начать отправку SMS из очереди')
                        setIconCls('add')
                        taq_load()
                    }
                }
            }

            function inste(eid, m) { if(eid) Ext.DomHelper.insertBefore(eid, m ? m : d) }

            if(Ext._ussdnum && sd.ussdnum)
                inste(Ext._ussdnum, 'Номер SIM: ' + sd.ussdnum), delete Ext._ussdnum

            if (!noerr) {
                Ext._log(d + 'err: sync_info store [' + noerr +']')
                Ext.Msg.show({ title:'Фатальная ошибка'
,msg:'<b>Ядро программы не отвечает.</b><br/><br/>sync_info.load():' + noerr
                    ,buttons: Ext.Msg.OK ,icon: Ext.Msg.ERROR
                })
                return
            }
            if (sd.logs.length > 0) {
//return// ui devel
              inste(errlog)
              for (var i in sd.logs) {
                var em = sd.logs[i]
                inste(errlog, em + "<br/>")
               do {
                var m = { title:'Фатальная ошибка'
                        ,buttons: Ext.Msg.OK//CANCEL
                        ,icon: Ext.Msg.ERROR
                        ,fn: function(bId, txt, opt){
                            Ext._log('bId: ' + bId+' txt: ' + txt + ' opt: ' + opt)
                        }
                    }
                if(/FATAL ERROR/.test(em)) {
m.msg = '<b>Не возможно подключиться к устройству.<br/>Сбой оборудования или конфигурации. Проверьте подключение или файл с настройками.</b><br/><br/>' + em
                } else if(/JSON config err/.test(em)) {
m.msg = '<b>Ошибка конфигурации. Проверьте файл с настройками.</b><br/><br/>' + em
                } else if(/GSM erro/.test(em)) {
m.msg = '<b>Критическая ошибка в программном модуле GSM. Обратитесь к разработчикам за содействием.</b><br/><br/>' + em
                } else if(/timeout AT/.test(em)) {
m.msg = '<b>Модем не отвечает на команды.</b><br/><br/>'+
        'Таймаут AT команды модема.<br/><br/>' + em
//m.buttonText = { ok: 'OK', cancel: 'Прекратить попытки (освободить очередь)' }
                } else if (/ECONNREFUSED/.test(em)){
m.msg = '<b>Невозможно подключиться к GSM модулю.</b><br/><br/>' + em
                } else if (/FATAL GSMNET/.test(em)){
                Ext.StoreManager.get('taq').loadPage(1, Ext.ui_reloadcb)
m.msg = '<b>GSM сеть отказывается работать.</b><br/><br/>' + em
                } else if (/TELNET ERR/.test(em)){
m.title = 'Telnet связсь с устройством'
m.msg = '<b>Ошибка комуникации ядра с устройством через telnet.</b><br/><br/>' + em
                } else if (/TIMEOUT SMS/.test(em)){
                Ext.StoreManager.get('taq').loadPage(1, Ext.ui_reloadcb)
m.title = 'Обработка SMS'
m.msg = '<b>Вышло время команды обработки SMS.</b><br/><br/>' + em
//				} else if (/NOLINK/.test(em)){
//m.title = 'Ядро'
//m.msg = '<b>Отказ в работе TELNET или GSM.</b><br/><br/>' + em
                } else if (/STATUS/.test(em)){
m.title = 'Сообщение о доставке'
m.msg = '<b>Проблемы с обновлением статуса доставки сообщения. Возможно локальное время компьютера не в рамках +- 15 минут от UTC.</b><br/><br/>' + em
                } else if (/ATERR/.test(em)){
m.title = 'Команды модему'
m.msg = '<b>Команда модему возвратила ошибку.<br/>Возможно проблемы в SIM карте или GSM сети.</b><br/><br/>' + em
                } else if (/ERROR/.test(em)){
m.title = 'Ошибка'
m.msg = '<b>Ошибка работы программы.</b><br/><br/>' + em
                } else if (/FATAL DB/.test(em)){
m.title = 'Ошибка'
m.msg = '<b>Фатальный сбой Базы Данных. Что-то случилось с программой MongoDB.</b><br/><br/>' + em
                } else break
                if (Ext.smsuimsg) Ext.Msg.show(m)
               } while(!true)
              }
              if(errlog) errlog.scrollIntoView(false)
            }
          /*if(true || sd.modules.length > 0) {
            if (sd.gsms.length > 0) {
              inste(gsmlog)
              for (var i in sd.gsms) {
                inste(gsmlog, sd.gsms[i] + "<br/>")
              }
              gsmlog.scrollIntoView(false)
            }
            if (sd.logs.length > 0) {
              var m
              inste(srvlog)
              for (var i in sd.logs) {
                m = sd.logs[i]
                inste(srvlog, m + "<br/>")
                if('taout.update' == m)
                    Ext.app_tabs.setActiveTab('outinfo') ,Ext.getStore('taout').loadPage(1, Ext.ui_reloadcb)
                    //,Ext.start_sendqb.enable()
              }
              srvlog.scrollIntoView(false)
            }
          try {
          	sigqv1 = eval(sd.modules[0].sigq)
            sigqv2 = sd.modules[1] ? eval(sd.modules[1].sigq) : 0
            if(sigqv1 != sigq1.value || '?' == sigq1.text[0])
                sigq1.updateProgress(sigqv1, sd.modules[0].op + ': ' + Math.ceil(sigqv1*100) + '%')
            if(sigqv2) {
                if(!sigq2.isVisible())
                    sigq2.setVisible(true)
                if(sigqv2 != sigq2.value || '?' == sigq2.text[0])
                    sigq2.updateProgress(sigqv2, sd.modules[1].op + ': ' + Math.ceil(sigqv2*100) + '%' )
            } else if(sigq2.isVisible())
                sigq2.updateProgress(0, '??: 0%' )

            if(sd.stats[0].gsm) {
                document.getElementById('gsmid').innerHTML = sd.stats[0].gsm
                if(!/^conn/.test(sd.stats[0].gsm)) {
                    Ext.getStore('modules').load()// if TA link is up
                }
            }

            if(sd.refresh){
              if('i' == sd.refresh){
                tain.loadPage(1)
                app_tabs.setActiveTab('incomeinfo')
              } else {
                Ext.getStore('taout').loadPage(1)
                //taq.loadPage(1)
                taq_load()
                //if(0 < taq.totalCount)
                    //Ext.start_sendqb.enable()
                if('t' == sd.refresh)
                    app_tabs.setActiveTab('outinfo')
                else if('q' == sd.refresh)
                    app_tabs.setActiveTab('sendqinfo')
              }
            }
           } catch (e) {}
           }*/
          }
          )
        }
    if (!sync_info)
        Ext._log("sync_info is null (too fast!)")
    Ext.sync_extjs_nodejs = sync_extjs_nodejs
    //UI brain sync by waiting for event or timeout and re-waiting
    /*Ext.wait_event_request = null
    Ext.wait_event_request_opts = {
        url: 'wait_event.json'
        ,timeout: 777777 //TODO config opt
        ,callback: function(opts ,success ,response){
            Ext._log('wait status: ' + response.status)
            if(success){// if success fire new waiting, else wait a bit
Ext._log(Ext.decode(response.responseText))
                Ext.wait_event() ,Ext.sync_extjs_nodejs()
            } else Ext.defer(Ext.wait_event, 4321)
        }
    }
    Ext.wait_event = function(){
        if(Ext.wait_event_request)
            Ext.Ajax.abort(Ext.wait_event_request) ,Ext.wait_event_request = null
        Ext.wait_event_request = Ext.Ajax.request(Ext.wait_event_request_opts)
    }
    Ext.defer(Ext.wait_event, 4321)*/

    Ext.smspasteS.add({})
    Ext.sheets.pasteSMS.getView().onCellSelect({row:0,column:0})

    Ext.sync_extjs_nodejs()

    Ext.animateNode = function(el, start, end, listeners){
        Ext.create('Ext.fx.Anim', {
            target: Ext.get(el),
            duration: 555,
            from: {
                opacity: start
            },
            to: {
                opacity: end
            },
            listeners: listeners
         });
    }

    //Ext.Msg.alert({icon: Ext.Msg.INFO ,buttons: Ext.Msg.OK
    //			,title:"Сообщение" ,msg:"Вставить приветствие клиенту."})
})
})(Ext)
</script>
</html>
<!-- olecom: enjsms.htm ends here -->
